---
name: Create OpenCog Build Pipeline Issues

'on':
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (preview only, do not create issues)'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Run monthly on the first day at 8 AM UTC
    - cron: '0 8 1 * *'

permissions:
  issues: write
  contents: read

jobs:
  create-foundation-issues:
    runs-on: ubuntu-latest
    name: Create Foundation Layer Issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create cogutil issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create cogutil issue"
            exit 0
          fi

          # Check if issue already exists
          existing=$(gh issue list --label "build-pipeline,foundation-layer" \
            --search "cogutil" --state open --json title | \
            jq -r '.[] | select(.title | contains("cogutil")) | .title')
          if [[ -n "$existing" ]]; then
            echo "cogutil issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/cogutil_issue.md << 'EOF'
          # Foundation Layer - Core utilities - cogutil

          This issue tracks the build pipeline steps for cogutil, which is part of the Foundation Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Install CogUtil
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          None (Foundation Layer)

          ## Required by:
          - atomspace
          - moses
          - language-learning

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: cogutil (Foundation Layer)" \
            --label "build-pipeline,foundation-layer,cogutil" \
            --body-file /tmp/cogutil_issue.md

  create-core-issues:
    runs-on: ubuntu-latest
    name: Create Core Layer Issues
    needs: create-foundation-issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create atomspace issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create atomspace issue"
            exit 0
          fi

          existing=$(gh issue list --label "build-pipeline,core-layer" \
            --search "atomspace" --state open --json title | \
            jq -r '.[] | select(.title | contains("atomspace") and 
            (contains("rocks") | not) and (contains("restful") | not)) | .title')
          if [[ -n "$existing" ]]; then
            echo "atomspace issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/atomspace_issue.md << 'EOF'
          # Core Layer - AtomSpace

          This issue tracks the build pipeline steps for atomspace, which is part of the Core Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] Install CogUtil
            - Action: `cd /cogutil/build && make install && ldconfig`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Build examples
            - Action: `cd build && make examples`

          - [ ] Install AtomSpace
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          - cogutil

          ## Required by:
          - atomspace-rocks, atomspace-restful, unify, ure, cogserver, attention, spacetime, pln, miner, asmoses, lg-atomese, learn, opencog

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: atomspace (Core Layer)" \
            --label "build-pipeline,core-layer,atomspace" \
            --body-file /tmp/atomspace_issue.md

      - name: Create atomspace-rocks issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create atomspace-rocks issue"
            exit 0
          fi

          existing=$(gh issue list --label "build-pipeline,core-layer" \
            --search "atomspace-rocks" --state open --json title | \
            jq -r '.[] | select(.title | contains("atomspace-rocks")) | .title')
          if [[ -n "$existing" ]]; then
            echo "atomspace-rocks issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/atomspace_rocks_issue.md << 'EOF'
          # Core Layer - AtomSpace RocksDB

          This issue tracks the build pipeline steps for atomspace-rocks, which is part of the Core Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] Install CogUtil
            - Action: `cd /cogutil/build && make install && ldconfig`

          - [ ] Install AtomSpace
            - Action: `cd /atomspace/build && make install && ldconfig`

          - [ ] Checkout AtomSpace-Rocks
            - Action: `git clone --depth 1 https://github.com/opencog/atomspace-rocks .`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Install AtomSpace-Rocks
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          - atomspace

          ## Required by:
          None (Extension module)

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: atomspace-rocks (Core Layer)" \
            --label "build-pipeline,core-layer,atomspace-rocks" \
            --body-file /tmp/atomspace_rocks_issue.md

      - name: Create atomspace-restful issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create atomspace-restful issue"
            exit 0
          fi

          existing=$(gh issue list --label "build-pipeline,core-layer" \
            --search "atomspace-restful" --state open --json title | \
            jq -r '.[] | select(.title | contains("atomspace-restful")) | .title')
          if [[ -n "$existing" ]]; then
            echo "atomspace-restful issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/atomspace_restful_issue.md << 'EOF'
          # Core Layer - AtomSpace RESTful API

          This issue tracks the build pipeline steps for atomspace-restful, which is part of the Core Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] Install CogUtil
            - Action: `cd /cogutil/build && make install && ldconfig`

          - [ ] Install AtomSpace
            - Action: `cd /atomspace/build && make install && ldconfig`

          - [ ] Checkout AtomSpace-RESTful
            - Action: `git clone --depth 1 https://github.com/opencog/atomspace-restful .`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Install AtomSpace-RESTful
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          - atomspace

          ## Required by:
          None (Extension module)

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: atomspace-restful (Core Layer)" \
            --label "build-pipeline,core-layer,atomspace-restful" \
            --body-file /tmp/atomspace_restful_issue.md

  create-logic-issues:
    runs-on: ubuntu-latest
    name: Create Logic Layer Issues
    needs: create-core-issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create unify issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create unify issue"
            exit 0
          fi

          existing=$(gh issue list --label "build-pipeline,logic-layer" \
            --search "unify" --state open --json title | \
            jq -r '.[] | select(.title | contains("unify")) | .title')
          if [[ -n "$existing" ]]; then
            echo "unify issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/unify_issue.md << 'EOF'
          # Logic Layer - Unify

          This issue tracks the build pipeline steps for unify, which is part of the Logic Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] Install CogUtil
            - Action: `cd /cogutil/build && make install && ldconfig`

          - [ ] Install AtomSpace
            - Action: `cd /atomspace/build && make install && ldconfig`

          - [ ] Checkout Unify
            - Action: `git clone --depth 1 https://github.com/opencog/unify .`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Install Unify
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          - atomspace

          ## Required by:
          - ure, pln, miner, asmoses, opencog

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: unify (Logic Layer)" \
            --label "build-pipeline,logic-layer,unify" \
            --body-file /tmp/unify_issue.md

      - name: Create ure issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create ure issue"
            exit 0
          fi

          existing=$(gh issue list --label "build-pipeline,logic-layer" \
            --search "ure" --state open --json title | \
            jq -r '.[] | select(.title | contains("ure")) | .title')
          if [[ -n "$existing" ]]; then
            echo "ure issue already exists: $existing"
            exit 0
          fi

          cat > /tmp/ure_issue.md << 'EOF'
          # Logic Layer - URE (Unified Rule Engine)

          This issue tracks the build pipeline steps for ure, which is part of the Logic Layer.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: `echo "export MAKEFLAGS=-j2" >> $BASH_ENV`

          - [ ] Install CogUtil
            - Action: `cd /cogutil/build && make install && ldconfig`

          - [ ] Install AtomSpace
            - Action: `cd /atomspace/build && make install && ldconfig`

          - [ ] Install Unify
            - Action: `cd /unify/build && make install && ldconfig`

          - [ ] Checkout URE
            - Action: `git clone --depth 1 https://github.com/opencog/ure .`

          - [ ] CMake Configure
            - Action: `mkdir build && cd build && cmake ..`

          - [ ] Build
            - Action: `cd build && make`

          - [ ] Build tests
            - Action: `cd build && make tests`

          - [ ] Run tests
            - Action: `cd build && make check ARGS="$MAKEFLAGS"`

          - [ ] Install URE
            - Action: `cd build && make install && ldconfig`

          - [ ] Print test log
            - Action: `cat build/tests/Testing/Temporary/LastTest.log`
            - When: always

          ## Dependencies:
          - atomspace, unify

          ## Required by:
          - pln, miner, asmoses, opencog

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

          gh issue create \
            --title "Build Pipeline: ure (Logic Layer)" \
            --label "build-pipeline,logic-layer,ure" \
            --body-file /tmp/ure_issue.md

  create-remaining-issues:
    runs-on: ubuntu-latest
    name: Create Remaining Layer Issues
    needs: create-logic-issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create remaining component issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would create remaining component issues"
            exit 0
          fi

          # Create issues for remaining components
          declare -A components=(
            ["cogserver"]="cognitive-systems-layer"
            ["attention"]="cognitive-systems-layer"
            ["spacetime"]="cognitive-systems-layer"
            ["pln"]="advanced-systems-layer"
            ["miner"]="advanced-systems-layer"
            ["moses"]="learning-systems-layer"
            ["asmoses"]="learning-systems-layer"
            ["lg-atomese"]="language-processing-layer"
            ["learn"]="language-processing-layer"
            ["language-learning"]="language-processing-layer"
            ["opencog"]="integration-layer"
          )

          for component in "${!components[@]}"; do
            layer="${components[$component]}"
            
            existing=$(gh issue list --label "build-pipeline,$layer" \
              --search "$component" --state open --json title | \
              jq -r ".[] | select(.title | contains(\"$component\")) | .title")
            if [[ -n "$existing" ]]; then
              echo "$component issue already exists: $existing"
              continue
            fi

            cat > "/tmp/${component}_issue.md" << EOF
          # Build Pipeline: $component

          This issue tracks the build pipeline steps for $component, which is part of the ${layer//-/ }.

          ## Build Steps:

          - [ ] Set number of make jobs
            - Action: \`echo "export MAKEFLAGS=-j2" >> \$BASH_ENV\`

          - [ ] Install dependencies
            - Action: Install required dependencies based on component requirements

          - [ ] Checkout $component
            - Action: \`git clone --depth 1 https://github.com/opencog/$component .\`

          - [ ] CMake Configure
            - Action: \`mkdir build && cd build && cmake ..\`

          - [ ] Build
            - Action: \`cd build && make\`

          - [ ] Build tests
            - Action: \`cd build && make tests\`

          - [ ] Run tests
            - Action: \`cd build && make check ARGS="\$MAKEFLAGS"\`

          - [ ] Install $component
            - Action: \`cd build && make install && ldconfig\`

          - [ ] Print test log
            - Action: \`cat build/tests/Testing/Temporary/LastTest.log\`
            - When: always

          ## Dependencies:
          See component-specific requirements in the OpenCog build pipeline

          ## Layer:
          ${layer//-/ }

          ---
          *This issue was automatically generated by the OpenCog build pipeline workflow.*
          EOF

            gh issue create \
              --title "Build Pipeline: $component (${layer//-/ })" \
              --label "build-pipeline,$layer,$component" \
              --body-file "/tmp/${component}_issue.md"
            
            echo "Created issue for $component"
            sleep 2  # Rate limiting
          done